{
	"info": {
		"_postman_id": "807835f6-f92a-4935-a120-9c4b2aeb0b99",
		"name": "Product CRUD collection",
		"description": "CRUD requests to the mediasoft2024 application",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28688619"
	},
	"item": [
		{
			"name": "Get products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"The data array length must be greater than zero\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Data array should not be empty\");",
							"});",
							"",
							"pm.test(\"Response has content type of application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"    var schema = {",
							"        type: \"array\",",
							"        items: {",
							"            type: \"object\",",
							"            properties: {",
							"                name: { type: \"string\" },",
							"                description: { type: \"string\" },",
							"                type: { type: \"string\" },",
							"                price: { type: \"number\" },",
							"                quantity: { type: \"number\" },",
							"                dateQuantityUpdated: { type: [\"string\"] },",
							"                dateCreated: { type: \"string\" }",
							"            },",
							"            required: [\"name\", \"description\", \"type\", \"price\", \"quantity\", 'dateQuantityUpdated', \"dateCreated\"]",
							"        }",
							"    };",
							"",
							"    var response = pm.response.json();",
							"    pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Price and quantity are non-negative numbers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"",
							"    responseData.forEach(item => {",
							"        pm.expect(item.price).to.be.a('number').and.to.be.at.least(0);",
							"        pm.expect(item.quantity).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}",
					"host": [
						"{{base_url}}"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Post product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"product saved\");",
							"});",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(\"product saved\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"purse2\",\n    \"description\": \"rail is\",\n    \"type\": \"CLOTHING\",\n    \"price\": 23,\n    \"quantity\": 23\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}",
					"host": [
						"{{base_url}}"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"product updated\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"necklace\",\n    \"description\": \"thrasher necklace\",\n    \"type\": \"ACCESSORIES\",\n    \"price\": 3.00,\n    \"quantity\": 10\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/{{product2}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"{{product2}}"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(\"product deleted\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/{{product}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"{{product}}"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "product",
			"value": "laptop"
		},
		{
			"key": "base_url",
			"value": "http://localhost:8080/api/product"
		},
		{
			"key": "product2",
			"value": "purse"
		}
	]
}